import { Instance, AuthenticationResponse, AuthenticateOptions, BaseClient, TokenWithExpiry } from 'pusher-platform-node';
export interface TokenWithExpiryAt {
    token: string;
    expiresAt: number;
}
export interface AuthenticatePayload {
    grant_type?: string;
    refresh_token?: string;
}
export interface AccessTokenOptions {
    grant_type?: string;
    refresh_token?: string;
}
export interface Options {
    instanceLocator: string;
    key: string;
    port?: number;
    host?: string;
    client?: BaseClient;
}
export interface GeneralRequestOptions {
    method: string;
    path: string;
    jwt?: string;
    qs?: object;
}
export interface GetRoomMessagesOptions {
    initial_id?: string;
    direction?: string;
    limit?: number;
}
export interface CreateRoomOptions {
    name: string;
    isPrivate?: boolean;
    userIds?: Array<string>;
}
export default class Chatkit {
    apiInstance: Instance;
    authorizerInstance: Instance;
    instanceLocator: string;
    private tokenWithExpiry?;
    constructor(options: Options);
    authenticate(authPayload: AuthenticatePayload, userId: string): AuthenticationResponse;
    generateAccessToken(authOptions: AuthenticateOptions): TokenWithExpiry;
    createUser(id: string, name: string, avatarURL?: string, customData?: any): Promise<void>;
    deleteUser(id: string): Promise<void>;
    getUsers(): Promise<any>;
    getUsersByIds(userIds: Array<number>): Promise<any>;
    getRoom(roomId: number): Promise<any>;
    getRoomMessages(roomId: number, initialId: string, direction: string, limit: number): Promise<any>;
    getRooms(): Promise<any>;
    createRoom(userId: string, options: CreateRoomOptions): Promise<any>;
    createRoomRole(name: string, permissions: Array<string>): Promise<void>;
    createGlobalRole(name: string, permissions: Array<string>): Promise<void>;
    private createRole(name, scope, permissions);
    deleteGlobalRole(roleName: string): Promise<void>;
    deleteRoomRole(roleName: string): Promise<void>;
    assignGlobalRoleToUser(userId: string, roleName: string): Promise<void>;
    assignRoomRoleToUser(userId: string, roleName: string, roomId: number): Promise<void>;
    getUserRoles(userId: string): Promise<any>;
    reassignGlobalRoleForUser(userId: string, roleName: string): Promise<void>;
    reassignRoomRoleForUser(userId: string, roleName: string, roomId: number): Promise<void>;
    removeGlobalRoleForUser(userId: string): Promise<void>;
    removeRoomRoleForUser(userId: string, roomId: number): Promise<void>;
    getPermissionsForGlobalRole(roleName: string): Promise<any>;
    getPermissionsForRoomRole(roleName: string): Promise<any>;
    getRoles(): Promise<any>;
    apiRequest(options: GeneralRequestOptions): Promise<any>;
    authorizerRequest(options: GeneralRequestOptions): Promise<any>;
    /**
     * This method manages the token for http library and pusher platform
     * communication
     */
    private getServerToken();
}
